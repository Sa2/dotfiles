set t_Co=256
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set expandtab    "タブをスペースにする
"set noet          "タブをタブ文字にする
set backspace=2 " バックスペース有効化
set number
set nobackup                   " バックアップを作らない
set noswapfile                 " swapファイルを作らない
set autoread                   " 他で書き換えられたら自動で読み直す
set laststatus=2               "常にステータス行を表示
set encoding=utf-8
set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8
set fileformats=unix,dos,mac
set hlsearch
set incsearch

filetype off

"vim-plug Scripts-----------------------------

call plug#begin()
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'EdenEast/nightfox.nvim'

Plug 'w0ng/vim-hybrid'
call plug#end()

"end vim-plug Scripts-------------------------


syntax on

"let g:hybrid_custom_term_colors = 1
"let g:hybrid_reduced_contrast = 1 " Remove this line if

set background=dark
colorscheme hybrid
"colorscheme nightfox


"command UF Unite file
nnoremap s <Nop>

" 画面分割
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
" 分割した画面間の移動
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
" 分割した画面を移動
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H

" <esc>のキーバインド
noremap <C-j> <esc>
noremap! <C-j> <esc>

" for HHKB
nnoremap ; :

" for coc

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" coc explorer
" スペースe でエクスプローラが立ち上がる
nmap <space>e <Cmd>CocCommand explorer<CR>


" [
"   {"text": "(e)dit", "value": "edit"}
"   {"text": "(n)ew", "value": "new"}
" ]
" NOTE: text must contains '()' to detect input and its must be 1 character
function! ChoseAction(actions) abort
  echo join(map(copy(a:actions), { _, v -> v.text }), ", ") .. ": "
  let result = getcharstr()
  let result = filter(a:actions, { _, v -> v.text =~#
    printf(".*\(%s\).*", result)})
  return len(result) ? result[0].value : ""
endfunction

function! CocJumpAction() abort
  let actions = [
        \ {"text": "(s)plit", "value": "split"},
        \ {"text": "(v)slit", "value": "vsplit"},
        \ {"text": "(t)ab", "value": "tabedit"},
        \ ]
  return ChoseAction(actions)
endfunction

nnoremap <silent> <C-t> :<C-u>call CocActionAsync('jumpDefinition', CocJumpAction())<CR>
